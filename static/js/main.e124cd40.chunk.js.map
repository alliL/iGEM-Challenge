{"version":3,"sources":["Card.js","App.js","serviceWorker.js","index.js"],"names":["Card","react_default","a","createElement","className","this","props","user","userId","title","body","Component","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","data","filter","postId","_this2","fetch","then","response","json","setState","e","console","log","Number","target","value","values","firstChild","nodeValue","_this3","users","map","id","src_Card_0","key","buttons","i","push","onClick","handleClick","options","length","onChange","updatePostId","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"8OAmBeA,gMAdX,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACXH,EAAAC,EAAAC,cAAA,WAASC,UAAU,UAChBC,KAAKC,MAAMC,KAAKC,QAEnBP,EAAAC,EAAAC,cAAA,WAASC,UAAU,WACjBH,EAAAC,EAAAC,cAAA,UAAKE,KAAKC,MAAMC,KAAKE,OACrBR,EAAAC,EAAAC,cAAA,SAAIE,KAAKC,MAAMC,KAAKG,eATbC,cCoEJC,cAlEb,SAAAA,EAAYN,GAAO,IAAAO,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAT,KAAAO,IACjBC,EAAAC,OAAAE,EAAA,EAAAF,CAAAT,KAAAS,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAb,KAAMC,KAEDa,MAAQ,CACXC,KAAM,GACNC,OAAQ,EAAC,GAAO,GAAO,GAAO,GAAO,GAAO,GAAO,GAAO,GAAO,GAAO,GACxEC,OAAQ,GANOT,mFAUC,IAAAU,EAAAlB,KAClBmB,MAAM,8CACHC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAL,GAAI,OAAIG,EAAKK,SAAS,CAAER,gDAGrBS,GACXC,QAAQC,WAAWC,OAAOH,EAAEI,OAAOC,QACnC7B,KAAKuB,SAAS,CACZN,OAAQU,OAAOH,EAAEI,OAAOC,6CAIhBL,GACV,IAAIM,EAAS9B,KAAKc,MAAME,OACxBc,EAAON,EAAEI,OAAOG,WAAWC,UAAY,IAAMF,EAAON,EAAEI,OAAOG,WAAWC,UAAY,GACpFhC,KAAKuB,SAAS,SAAAT,GAAK,MAAK,CACtBE,OAAQc,sCAaV,IATO,IAAAG,EAAAjC,KAEHkC,EADOlC,KAAKc,MAAMC,KACLoB,IAAI,SAACjC,GACpB,GAAI+B,EAAKnB,MAAME,OAAOd,EAAKC,OAAS,IAAM8B,EAAKnB,MAAMG,SAAWf,EAAKkC,GACnE,OAAOxC,EAAAC,EAAAC,cAACuC,EAAD,CAAMC,IAAKpC,EAAKkC,GAAIlC,KAAMA,MAIjCqC,EAAU,GACLC,EAAI,EAAGA,EAAI,GAAIA,IACtBD,EAAQE,KAAK7C,EAAAC,EAAAC,cAAA,UAAQwC,IAAKE,EAAGE,QAAS,SAAClB,GAAD,OAAOS,EAAKU,YAAYnB,KAAKgB,IAGrE,IAAII,EAAU,GACdA,EAAQH,KAAK7C,EAAAC,EAAAC,cAAA,UAAQwC,IAAI,UAAUT,MAAM,WAA5B,YACb,IAAK,IAAIW,EAAI,EAAGA,EAAIxC,KAAKc,MAAMC,KAAK8B,OAAQL,IAC1CI,EAAQH,KAAK7C,EAAAC,EAAAC,cAAA,UAAQwC,IAAKtC,KAAKc,MAAMC,KAAKyB,GAAGJ,GAAIP,MAAO7B,KAAKc,MAAMC,KAAKyB,GAAGJ,IAAKpC,KAAKc,MAAMC,KAAKyB,GAAGJ,KAGrG,OACExC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACfH,EAAAC,EAAAC,cAAA,UAAQgD,SAAU,SAACtB,GAAD,OAAOS,EAAKc,aAAavB,KACxCoB,GAEAL,IAGJL,UA7DS5B,aCQE0C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO1D,EAAAC,EAAAC,cAACyD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxC,KAAK,SAAAyC,GACjCA,EAAaC","file":"static/js/main.e124cd40.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './Card.css';\r\n\r\nclass Card extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"cardinfo\">\r\n          <section className=\"userid\">\r\n            {this.props.user.userId}\r\n          </section>\r\n          <section className=\"content\">\r\n            <h2>{this.props.user.title}</h2>\r\n            <p>{this.props.user.body}</p>\r\n          </section>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Card;","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport Card from './Card.js'\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      data: [],\r\n      filter: [false, false, false, false, false, false, false, false, false, true],\r\n      postId: 0\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch('https://jsonplaceholder.typicode.com/posts')\r\n      .then(response => response.json())\r\n      .then(data => this.setState({ data }));\r\n  }\r\n\r\n  updatePostId(e) {\r\n    console.log(typeof(Number(e.target.value)));\r\n    this.setState({\r\n      postId: Number(e.target.value)\r\n    });\r\n  }\r\n\r\n  handleClick(e) {\r\n    let values = this.state.filter;\r\n    values[e.target.firstChild.nodeValue - 1] = !values[e.target.firstChild.nodeValue - 1]\r\n    this.setState(state => ({\r\n      filter: values\r\n    }));\r\n  }\r\n\r\n  render() {\r\n    let data = this.state.data\r\n    let users = data.map((user) => {\r\n      if (this.state.filter[user.userId - 1] || this.state.postId === user.id) {\r\n        return <Card key={user.id} user={user} />\r\n      }\r\n    });\r\n\r\n    let buttons = [];\r\n    for (let i = 1; i < 11; i++) {\r\n      buttons.push(<button key={i} onClick={(e) => this.handleClick(e)}>{i}</button>);\r\n    }\r\n\r\n    let options = [];\r\n    options.push(<option key=\"default\" value=\"default\">post ID</option>);\r\n    for (let i = 0; i < this.state.data.length; i++) {\r\n      options.push(<option key={this.state.data[i].id} value={this.state.data[i].id}>{this.state.data[i].id}</option>)\r\n    }\r\n\r\n    return (\r\n      <div className=\"App\">\r\n        <header>\r\n          <div className=\"btn-group\">\r\n          <select onChange={(e) => this.updatePostId(e)}>\r\n            {options}\r\n          </select>\r\n            {buttons}\r\n          </div>\r\n        </header>\r\n        {users}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}