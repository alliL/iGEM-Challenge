{"version":3,"sources":["Card.js","App.js","serviceWorker.js","index.js"],"names":["Card","react_default","a","createElement","className","this","props","user","userId","title","body","Component","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","data","filter","postId","_this2","fetch","then","response","json","setState","e","console","log","Number","target","value","values","firstChild","nodeValue","_this3","users","map","id","src_Card_0","key","buttons","i","push","onClick","handleClick","options","length","onChange","updatePostId","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"8OAmBeA,gMAdX,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACXH,EAAAC,EAAAC,cAAA,WAASC,UAAU,UAChBC,KAAKC,MAAMC,KAAKC,QAEnBP,EAAAC,EAAAC,cAAA,WAASC,UAAU,WACjBH,EAAAC,EAAAC,cAAA,UAAKE,KAAKC,MAAMC,KAAKE,OACrBR,EAAAC,EAAAC,cAAA,SAAIE,KAAKC,MAAMC,KAAKG,eATbC,cCoEJC,cAlEb,SAAAA,EAAYN,GAAO,IAAAO,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAT,KAAAO,IACjBC,EAAAC,OAAAE,EAAA,EAAAF,CAAAT,KAAAS,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAb,KAAMC,KAEDa,MAAQ,CACXC,KAAM,GACNC,OAAQ,EAAC,GAAO,GAAO,GAAO,GAAO,GAAO,GAAO,GAAO,GAAO,GAAO,GACxEC,OAAQ,GANOT,mFAUC,IAAAU,EAAAlB,KAClBmB,MAAM,8CACHC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAL,GAAI,OAAIG,EAAKK,SAAS,CAAER,gDAGrBS,GACXC,QAAQC,WAAWC,OAAOH,EAAEI,OAAOC,QACnC7B,KAAKuB,SAAS,CACZN,OAAQU,OAAOH,EAAEI,OAAOC,6CAIhBL,GACV,IAAIM,EAAS9B,KAAKc,MAAME,OACxBc,EAAON,EAAEI,OAAOG,WAAWC,UAAY,IAAMF,EAAON,EAAEI,OAAOG,WAAWC,UAAY,GACpFhC,KAAKuB,SAAS,SAAAT,GAAK,MAAK,CACtBE,OAAQc,sCAaV,IATO,IAAAG,EAAAjC,KAEHkC,EADOlC,KAAKc,MAAMC,KACLoB,IAAI,SAACjC,GACpB,GAAI+B,EAAKnB,MAAME,OAAOd,EAAKC,OAAS,IAAM8B,EAAKnB,MAAMG,SAAWf,EAAKkC,GACnE,OAAOxC,EAAAC,EAAAC,cAACuC,EAAD,CAAMC,IAAKpC,EAAKkC,GAAIlC,KAAMA,MAIjCqC,EAAU,GACLC,EAAI,EAAGA,EAAI,GAAIA,IACtBD,EAAQE,KAAK7C,EAAAC,EAAAC,cAAA,UAAQwC,IAAKE,EAAGE,QAAS,SAAClB,GAAD,OAAOS,EAAKU,YAAYnB,KAAKgB,IAGrE,IAAII,EAAU,GACdA,EAAQH,KAAK7C,EAAAC,EAAAC,cAAA,UAAQwC,IAAI,UAAUT,MAAM,WAA5B,YACb,IAAK,IAAIW,EAAI,EAAGA,EAAIxC,KAAKc,MAAMC,KAAK8B,OAAQL,IAC1CI,EAAQH,KAAK7C,EAAAC,EAAAC,cAAA,UAAQwC,IAAKtC,KAAKc,MAAMC,KAAKyB,GAAGJ,GAAIP,MAAO7B,KAAKc,MAAMC,KAAKyB,GAAGJ,IAAKpC,KAAKc,MAAMC,KAAKyB,GAAGJ,KAGrG,OACExC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACfH,EAAAC,EAAAC,cAAA,UAAQgD,SAAU,SAACtB,GAAD,OAAOS,EAAKc,aAAavB,KACxCoB,GAEAL,IAGJL,UA7DS5B,aCQE0C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO1D,EAAAC,EAAAC,cAACyD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxC,KAAK,SAAAyC,GACjCA,EAAaC","file":"static/js/main.084ef1a2.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './Card.css';\r\n\r\nclass Card extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"cardinfo\">\r\n          <section className=\"userid\">\r\n            {this.props.user.userId}\r\n          </section>\r\n          <section className=\"content\">\r\n            <h2>{this.props.user.title}</h2>\r\n            <p>{this.props.user.body}</p>\r\n          </section>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Card;","import React, { Component } from 'react';\nimport './App.css';\nimport Card from './Card.js'\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      data: [],\n      filter: [false, false, false, false, false, false, false, false, false, true],\n      postId: 0\n    };\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/posts')\n      .then(response => response.json())\n      .then(data => this.setState({ data }));\n  }\n\n  updatePostId(e) {\n    console.log(typeof(Number(e.target.value)));\n    this.setState({\n      postId: Number(e.target.value)\n    });\n  }\n\n  handleClick(e) {\n    let values = this.state.filter;\n    values[e.target.firstChild.nodeValue - 1] = !values[e.target.firstChild.nodeValue - 1]\n    this.setState(state => ({\n      filter: values\n    }));\n  }\n\n  render() {\n    let data = this.state.data\n    let users = data.map((user) => {\n      if (this.state.filter[user.userId - 1] || this.state.postId === user.id) {\n        return <Card key={user.id} user={user} />\n      }\n    });\n\n    let buttons = [];\n    for (let i = 1; i < 11; i++) {\n      buttons.push(<button key={i} onClick={(e) => this.handleClick(e)}>{i}</button>);\n    }\n\n    let options = [];\n    options.push(<option key=\"default\" value=\"default\">post ID</option>);\n    for (let i = 0; i < this.state.data.length; i++) {\n      options.push(<option key={this.state.data[i].id} value={this.state.data[i].id}>{this.state.data[i].id}</option>)\n    }\n\n    return (\n      <div className=\"App\">\n        <header>\n          <div className=\"btn-group\">\n          <select onChange={(e) => this.updatePostId(e)}>\n            {options}\n          </select>\n            {buttons}\n          </div>\n        </header>\n        {users}\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}